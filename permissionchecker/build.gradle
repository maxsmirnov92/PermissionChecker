buildscript {
    repositories {
        jcenter()
    }
    dependencies {
//        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

//plugins {
//    id "com.jfrog.bintray" version "1.7.3"
//}

repositories {
    jcenter()
}

apply plugin: 'com.android.library'

//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def groupIdName = "net.maxsmr"
def artifactVersionName = "1.0.9"

def siteUrl = 'https://github.com/maxsmirnov92/PermissionChecker'
def gitUrl = 'https://github.com/maxsmirnov92/PermissionChecker.git'

//def releaseDir = "${buildDir}/release"
def localReleaseDest = project.hasProperty("LOCAL_REPO") ? "${rootProject.projectDir}/${project.LOCAL_REPO}" : "${rootProject.buildDir}/release/repo"

android {

    signingConfigs {
        release {
            keyAlias 'maxsmirnov'
            storeFile file('~/.android/release-key.keystore')
        }
    }

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 25
        versionCode 1
        versionName artifactVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

configurations {
    javadocDependencies
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//task javaDocsJar(type: Jar, dependsOn: javaDocs) {
//    classifier = 'javadoc'
//    from javaDocs.destinationDir
//}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:25.3.1'
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupIdName
        pom.artifactId = project.archivesBaseName
        pom.version = artifactVersionName
        repository(url: "file://${localReleaseDest}")
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    publications = ['artifactPublication']
    pkg {
        repo = 'maven'
        name = rootProject.name /*+ File.separator + project.name*/
        userOrg = user
        websiteUrl = siteUrl
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl
        version {
            name = artifactVersionName
        }
        publicDownloadNumbers = true
    }
}

publishing {
    publications {
        artifactPublication(MavenPublication) {
            groupId = groupIdName
            artifactId = project.archivesBaseName
            version = artifactVersionName
            artifact "${project.buildDir}/outputs/aar/${archivesBaseName}-release.aar"
            artifact sourcesJar
//            artifact javadocsJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
